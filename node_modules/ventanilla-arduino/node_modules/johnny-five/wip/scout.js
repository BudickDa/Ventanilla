var five = require("../lib/johnny-five.js");
var exec = require("child_process").exec;
var temporal = require("temporal");
// var keypress = require("keypress");
var dualShock = require("dualshock-controller");
var argv = require("optimist").default({
  noscan: false,
  calibrate: false
}).argv;

var board = new five.Board();

var controller = dualShock({
  config: "dualShock3",
  analogStickSmoothing: true
});

controller.isConnected = false;

function move(positions, speed) {
  joints.forEach(function(part, i) {
    legs[part].to(positions[i], speed);
  });
}

function scale(x, fromLow, fromHigh, toLow, toHigh) {
  return (x - fromLow) * (toHigh - toLow) /
    (fromHigh - fromLow) + toLow;
}

function degrees(center, val) {
  if (val >= 128) {
    return scale(val, 128, 255, center - 1, 0);
  }
  return scale(val, 127, 0, center, 180);
}

// { pin:  2, id: "lf", startAt: 90 },
// { pin:  3, id: "la", startAt: 90 },
// { pin:  4, id: "lk", startAt: 90 },
// { pin:  5, id: "lt", startAt: 90 },
// { pin:  6, id: "lr", startAt: 90 },
// { pin:  7, id: "ly", startAt: 90 },

// { pin:  8, id: "rf", startAt: 90 },
// { pin:  9, id: "ra", startAt: 90 },
// { pin: 10, id: "rk", startAt: 90 },
// { pin: 11, id: "rt", startAt: 90 },
// { pin: 12, id: "rr", startAt: 90 },
// { pin: 13, id: "ry", startAt: 90 },



var legs = {};

var inits = [
  { pin:  2, id: "lf", startAt: 90 },
  { pin:  3, id: "la", startAt: 90 },
  { pin:  4, id: "lk", startAt: 97 },
  { pin:  5, id: "lt", startAt: 71 },
  { pin:  6, id: "lr", startAt: 90 },
  { pin:  7, id: "ly", startAt: 100 },

  { pin:  8, id: "rf", startAt: 90, isInverted: true },
  { pin:  9, id: "ra", startAt: 90, isInverted: true },
  { pin: 10, id: "rk", startAt: 90, isInverted: true },
  { pin: 11, id: "rt", startAt: 81, isInverted: true },
  { pin: 12, id: "rr", startAt: 90, isInverted: true },
  { pin: 13, id: "ry", startAt: 90, isInverted: true }
];

var joints = inits.map(function(init) {
  return init.id;
});

var starts = inits.map(function(init) {
  return init.startAt;
});


board.on("ready", function() {
  legs = inits.reduce(function(accum, init) {
    accum[init.id] = new five.Servo(init);
    return accum;
  }, {});



  function tuner(step) {
    // Cannot control both at a time
    if (Group.side === -1) {
      return;
    }

    var set = Group.sets[Group.index];
    var part = set.parts[Group.side];
    var value = set.values[Group.side];

    if (value === null) {
      value = legs[part].startAt;
    }

    if (step < 0) {
      value--;
    } else {
      value++;
    }

    process.nextTick(function() {
      legs[part].to(value);
    });

    set.values[Group.side] = value;
  }

  var labels = [ "Foot", "Ankle", "Knee", "Thigh", "Hip Roll", "Hip Yaw" ];

  var Group = {
    stash: {
      side: -1,
      index: 0
    },
    isGrouped: false,
    get side() {
      return Group.stash.side;
    },
    set side(value) {
      // -1 = both, 0 = right, 1 = left
      var which = value === -1 ?
        "both" : (value ? "right" : "left");

      console.log(
        "------- %s %s -------",
        which.toUpperCase(),
        labels[Group.stash.index].toUpperCase()
      );

      Group.stash.side = value;
    },
    get index() {
      return Group.stash.index;
    },
    set index(value) {

      console.log(
        "Controlling %s", this.sets[value].name
      );

      Group.stash.index = value;
    },
    sets: [
      { name: "Feet",
        pins: [ 2, 8 ],
        parts: [ "lf", "rf" ],
        values: [ null, null ]
      },
      { name: "Ankles",
        pins: [ 3, 9 ],
        parts: [ "la", "ra" ],
        values: [ null, null ]
      },
      { name: "Knees",
        pins: [ 4, 10 ],
        parts: [ "lk", "rk" ],
        values: [ null, null ]
      },
      { name: "Thighs",
        pins: [ 5, 11 ],
        parts: [ "lt", "rt" ],
        values: [ null, null ]
      },
      { name: "Hip Roll",
        pins: [ 6, 12 ],
        parts: [ "lr", "rr" ],
        values: [ null, null ]
      },

      { name: "Hip Yaw",
        pins: [ 7, 13 ],
        parts: [ "ly", "ry" ],
        values: [ null, null ]
      }
    ]
  };

  controller.on("connected", function() {
    controller.isConnected = true;
  });

  controller.on("leftAnalogBump:press", function() {
    left.isActivated = !left.isActivated;
  });

  controller.on("rightAnalogBump:press", function() {
    right.isActivated = !right.isActivated;
  });


  console.log( "argv.calibrate?", argv.calibrate );
  // Calibration Mode
  //
  if (argv.calibrate) {

    controller.on("triangle:press", function() {
      var which = Group.side === -1 ?
        "both" : (Group.side ? "right" : "left");
      var part = Group.sets[Group.index].name;
      var say = ["Controlling ", which, part].join(" ");

      console.log(say);

      exec("say " + say);
    });

    controller.on("square:press", function() {
      labels[Group.stash.index]

      var values = Group.sets[Group.index].values;
      var which = labels[Group.stash.index].toLowerCase();
      var say = "";

      if (Group.side === -1) {
        // do both
        values.forEach(function(value, i) {
          var part = Group.sets[Group.index].parts[i];
          var side = part[0] === "r" ? "right" : "left";

          if (value === null) {
            value = "starting";
          }

          say += [side, which, "is at", value, "degrees"].join(" ") + ", ";
        });
      } else {
        // do side
        var part = Group.sets[Group.index].parts[Group.side]
        var value = Group.sets[Group.index].values[Group.side];
        var side = part[0] === "r" ? "right" : "left";

        if (value === null) {
          value = "starting";
        }

        say = [side, which, "is at", value, "degrees"].join(" ");
      }

      exec("say " + say);
    });

    controller.on("x:press", function() {
      Group.isGrouped = !Group.isGrouped;
    });

    controller.on("circle:press", function() {
      Group.side = -1;
    });

    controller.on("dpadLeft:press", function() {
      Group.side = 0;
    });

    controller.on("dpadRight:press", function() {
      Group.side = 1;
    });

    controller.on("dpadUp:press", function() {
      var next = Group.index + 1;

      if (next === Group.sets.length) {
        next = 0;
      }

      Group.index = next;
    });

    controller.on("dpadDown:press", function() {
      var next = Group.index - 1;

      if (next === -1) {
        next = Group.sets.length - 1;
      }

      Group.index = next;
    });


    controller.on("left:move", function(position) {
      var part = Group.sets[Group.index].parts[0];
      var pos = degrees(legs[part].startAt, position.y);

      if (Group.isGrouped) {
        Group.sets[Group.index].parts.forEach(function(part) {
          legs[part].to(pos);
        });
      } else {
        legs[part].to(pos);
      }
    });

    controller.on("right:move", function(position) {
      var part = Group.sets[Group.index].parts[1];
      var pos = degrees(legs[part].startAt, position.y);

      if (Group.isGrouped) {
        Group.sets[Group.index].parts.forEach(function(part) {
          legs[part].to(pos);
        });
      } else {
        legs[part].to(pos);
      }
    });

    controller.on("l1:press", function() {
      tuner(-1);
    });

    controller.on("r1:press", function() {
      tuner(1);
    });


    controller.connect();
  }

  this.repl.inject({
    Group: Group
  });
});
