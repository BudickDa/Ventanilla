var modules = {};
/*
* Initilize hardware
* Input: config is a dynamicly generated file. It contains:
* - which boards shall be included and what ports do they have
*/
exports.init = function(){
  if(module_exists('ventanilla-arduino')){
    modules.arduino = require('ventanilla-arduino');
  }
  if(module_exists('./logicTypes')){
    modules.logicTypes = require('./logicTypes');
  }
  return true;
}



/*Helper*/
var module_exists = function(name){
  try {return require.resolve(name)}
  catch(e){return false}
}

exports.registerBlock = function(block){
  if(block.system === "arduino"){
    if(modules.arduino !== undefined){
      if(block.type === "Sensor"){
        try{
          console.log("Will create Sensor " + block.name + " - pending");
          return modules.arduino.initSensor(block);
        }catch(e){
          return console.log("Error in registerBlock in ventanilla/index.js: Initilization of Sensor " + block.name + "went wrong:" + e);
        }
      } else if(block.type === "ArduinoUno"){
          try{
            console.log("Will create ArduninoUno - pending");
            return modules.arduino.initBoard(block);
          }catch(e){
            return console.log("Error in registerBlock in ventanilla/index.js: Initilization of Sensor " + block.name + "went wrong:" + e);
        }
      }
      else{
        return console.log("Error in RegisterBlock in ventanilla/index.js: Blocktype is not available in System Arduino");
      }
    }else{
      return console.log("Error in RegisterBlock in ventanilla/index.js: Arduinomodul is not available.");
    }
  }
  else if(block.system == "Logic"){
    console.log("Will create Logic  - pending");
    var add = modules.logicTypes[block.name];
    return add(block,cb);
  }
  else if(block.system == "nodeJs"){
    if(block.type === "Ui"){
      //nothing todo here...
      console.log("Will create Ui - pending");
      console.log("Will create Ui - initilizing");
      console.log("Will create Ui - succesfull");
      return;
    }
  }
}


exports.sendData = function(uid,pin,type){
  if(type==="Sensor"){
    console.log("Prepare to send data for "+pin.pid);
    try{
      blocks[uid].on('data', function(){
        try{
          blocks[uid].value[pin.pid] = this.output(this.value,pin.type);
          app.io.broadcast('pid'+pin.pid,this.output(this.value,pin.type));
        }catch(e){
          console.log("Error at sendData in ventanilla/index.js while broadcasting: " + e);
        }
      });
    }catch(e){
      console.log("Error at sendData in ventanilla/index.js while fetching data: " + e);
    }
  }
  else if(type === "ArduinoUno"){
    try{
      setInterval( function(){
        try{
          blocks[uid].value = this.output(this.value);
          app.io.broadcast('pid'+pin.pid,pin.type);
        }catch(e){
          console.log("Error at sendSensorData in ventanilla/index.js while broadcasting: " + e);
        }
      }, 5000);
    }catch(e){
      console.log("Error at sendSensorData in ventanilla/index.js while setting intervall: " + e);
    }


  }

}
